version: 0.2

# These are passed from the CodeBuild project configuration in Terraform.
env:
  variables:
    AWS_ACCOUNT_ID: "$AWS_ACCOUNT_ID"       # Injected from CodeBuild project env
    AWS_DEFAULT_REGION: "$AWS_DEFAULT_REGION" # Injected from CodeBuild project env
    BACKEND_ECR_REPOSITORY_URI: "$BACKEND_ECR_REPOSITORY_URI" # Injected from CodeBuild project env
    FRONTEND_ECR_REPOSITORY_URI: "$FRONTEND_ECR_REPOSITORY_URI" # Injected from CodeBuild project env
    IMAGE_TAG: "latest" # Or use $CODEBUILD_RESOLVED_SOURCE_VERSION for a commit-specific tag

phases:
  pre_build:
    commands:
      - echo "Logging in to Amazon ECR..."
      # Use the AWS CLI to get an authentication token and log in to ECR.
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com

  build:
    commands:
      # --- Build Backend Image ---
      - echo "Building the backend Docker image from ./src/backend..."
      # Use the context and Dockerfile path specified in docker-compose.yaml
      - docker build -t $BACKEND_ECR_REPOSITORY_URI:$IMAGE_TAG -f ./src/backend/Dockerfile ./src/backend

      # --- Build Frontend Image ---
      - echo "Building the frontend Docker image from ./src/frontend..."
      # Use the context and Dockerfile path specified in docker-compose.yaml
      - docker build -t $FRONTEND_ECR_REPOSITORY_URI:$IMAGE_TAG -f ./src/frontend/Dockerfile ./src/frontend

      # --- Prepare Deployment Artifact for CodeDeploy ---
      - echo "Preparing deployment artifact for CodeDeploy..."
      # Create necessary directories within the artifact structure
      - mkdir -p deploy_artifact/nginx/certificate
      - mkdir -p deploy_artifact/scripts
      - mkdir -p deploy_artifact/src/init # For database initialization files

      # Copy all necessary files from your repository into the 'deploy_artifact' directory
      # These paths are relative to the root of your Git repository.
      - cp docker-compose.aws.yaml deploy_artifact/docker-compose.aws.yaml
      - cp .env.example deploy_artifact/.env.example # Copy a template for .env
      - cp nginx/nginx.conf deploy_artifact/nginx/nginx.conf
      - cp -r nginx/certificate/* deploy_artifact/nginx/certificate/ # Copy SSL certs (ensure they are in your repo)
      - cp -r src/init/* deploy_artifact/src/init/ # Copy database init scripts/Dockerfile
      - cp appspec.yaml deploy_artifact/appspec.yaml
      - cp -r scripts/* deploy_artifact/scripts/ # Copy all deployment scripts
  post_build:
    commands:
      # --- Push Backend Image to ECR ---
      - echo "Pushing the backend Docker image to ECR..."
      - docker push $BACKEND_ECR_REPOSITORY_URI:$IMAGE_TAG

      # --- Push Frontend Image to ECR ---
      - echo "Pushing the frontend Docker image to ECR..."
      - docker push $FRONTEND_ECR_REPOSITORY_URI:$IMAGE_TAG

      - echo "Build and push of backend and frontend images completed successfully!"

artifacts:
  files:
    - "**/*" # Include all files from the 'deploy_artifact' directory
  base-directory: deploy_artifact # Set the base directory for artifacts
  discard-paths: no # Keep the directory structure within the artifact
  name: "deployment-artifact" # Name of the artifact (e.g., for CodePipeline)